<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <UsingTask AssemblyFile="$(MSBuildProjectDirectory)/../../External/cctask/CCTask/bin/Release/CCTask.dll" TaskName="CCompilerTask" />
    <UsingTask AssemblyFile="$(MSBuildProjectDirectory)/../../External/cctask/CCTask/bin/Release/CCTask.dll" TaskName="CLinkerTask" />

  <Target Name="VerifyProperties">
    <Error Text="No configuration provided" Condition=" $(Configuration) == '' " />
    <Error Text="Host endianess not provided" Condition=" $(HostEndianess) == '' " />
    <Error Text="Wrong host endianess value: provide 'le' or 'be'" Condition=" $(HostEndianess) != 'le' and $(HostEndianess) != 'be' " />

    <Error Text="Target endianess not provided" Condition=" $(TargetEndianess) == '' " />
    <Error Text="Wrong target endianess value: provide 'le' or 'be'" Condition=" $(TargetEndianess) != 'le' and $(TargetEndianess) != 'be' " />

    <Error Text="Target architecture not provided" Condition=" $(TargetArchitecture) == '' " />

    <Error Text="Host architecture not provided!" Condition=" $(HostArchitecture) == '' " />
    <Message Text="Host word size not provided!" Condition=" $(HostWordSize) == '' " />

    <Message Text="Target word size not provided. Using default: 32" Condition=" $(TargetWordSize) == '' " />
    <Message Text="Emulated target not provided. Using default: $(TargetArchitecture.ToLower())" Condition=" $(EmulatedTarget) == '' " />

    <PropertyGroup>
        <TargetWordSize Condition=" $(TargetWordSize) == '' ">32</TargetWordSize>

        <ProtoTarget>$(TargetArchitecture.ToLower())</ProtoTarget>
        <HostUpper>$(HostArchitecture.ToUpper())</HostUpper>
        <EmulatedTarget Condition=" '$(EmulatedTarget)' == '' ">$(TargetArchitecture.ToLower())</EmulatedTarget>

        <ConfigName>$(ProtoTarget)-$(TargetWordSize)_$(TargetEndianess)</ConfigName>
        <SoFileLocation>bin/$(Configuration)/lib$(HostWordSize)</SoFileLocation>
        <LibraryPath>translate-$(ProtoTarget)-$(TargetEndianess).so</LibraryPath>
        <ObjectFilesDirectory>obj/$(Configuration)/obj-$(ConfigName)</ObjectFilesDirectory>
        <TlibDirectory>tlib</TlibDirectory>
        <TcgLibraryDirectory>$(MSBuildProjectDirectory)/tlib/tcg/bin/$(Configuration)</TcgLibraryDirectory>
        <TcgLibraryFilename>libtcg_$(HostArchitecture)-$(HostWordSize)-$(TargetWordSize)_$(TargetEndianess).a</TcgLibraryFilename>
    </PropertyGroup>

    <Message Text="Configuring translation library" />
    <Message Text="Host : $(HostArchitecture), $(HostWordSize)-bit, $(HostEndianess)" />
    <Message Text="Target : $(TargetArchitecture), $(TargetWordSize)-bit, $(TargetEndianess)" />
  </Target>

  <Target Name="GenerateFlags" DependsOnTargets="VerifyProperties">
      <PropertyGroup>
          <EmulatedTargetUpper>$(EmulatedTarget.ToUpper())</EmulatedTargetUpper>
      </PropertyGroup>
      <ItemGroup>
          <SourceFiles Include="$(TlibDirectory)/*.c" />
          <SourceFiles Include="$(TlibDirectory)/arch/*.c" />
          <SourceFiles Include="$(TlibDirectory)/external/*.c" />
          <SourceFiles Include="$(TlibDirectory)/fpu/*.c" />
          <SourceFiles Include="$(TlibDirectory)/arch/$(EmulatedTarget)/*.c" />
          <SourceFiles Include="emul8/*.c" />
          <SourceFiles Include="emul8/arch/$(EmulatedTarget)/*.c" />
      </ItemGroup>
      <ItemGroup>
          <CompilationFlags Include="-fomit-frame-pointer" />
          <CompilationFlags Include="-shared" />
          <CompilationFlags Include="-m32 " Condition="$(HostWordSize) == '32'" />
          <CompilationFlags Include="-fPIC" Condition=" $(HostWordSize) == '64'" />
          <CompilationFlags Include="-g3" Condition=" $(Configuration) == 'Debug'" />
          <CompilationFlags Include="-O2" Condition=" $(Configuration) == 'Release' or $(Configuration) == ''" />
          <CompilationFlags Include="-Wall" />
          <CompilationFlags Include="-Wextra" />
          <CompilationFlags Include="-Wno-unused-parameter" />
          <CompilationFlags Include="-Wno-sign-compare" />
          <CompilationFlags Include="-Werror" />
          <CompilationFlags Include="-DCONFIG_NEED_MMU" />
          <CompilationFlags Include="-DTCG_TARGET_$(HostUpper)" />
          <CompilationFlags Include="-DHOST_BITS_$(HostWordSize)" />
          <CompilationFlags Include="-I $(TlibDirectory)/arch/$(EmulatedTarget)" />
          <CompilationFlags Include="-I $(TlibDirectory)/tcg/$(HostArchitecture)" />
          <CompilationFlags Include="-I $(TlibDirectory)/include" />
          <CompilationFlags Include="-I $(TlibDirectory)/fpu" />
          <CompilationFlags Include="-I $(TlibDirectory)/tcg" />
          <CompilationFlags Include="-I emul8/include" />

          <CompilationFlags Include="-DTARGET_SHORT_ALIGNMENT=2" />
          <CompilationFlags Include="-DTARGET_INT_ALIGNMENT=4" />
          <CompilationFlags Include="-DTARGET_LONG_ALIGNMENT=4" />
          <CompilationFlags Include="-DTARGET_LLONG_ALIGNMENT=4" />

          <CompilationFlags Include="-DHOST_$(HostUpper)=1" />
          <CompilationFlags Include="-DHOST_LONG_BITS=$(HostWordSize)" />

          <CompilationFlags Include="-DTARGET_ARCH=&quot;$(EmulatedTarget)&quot;" />
          <CompilationFlags Include="-DTARGET_$(EmulatedTargetUpper)=1" />
          <CompilationFlags Include="-DTARGET_PHYS_ADDR_BITS=$(TargetWordSize)" />
          <CompilationFlags Include="-DCONFIG_$(HostUpper)_DIS=1" />
          <CompilationFlags Include="-DCONFIG_$(EmulatedTargetUpper)_DIS=1" />
          <CompilationFlags Include="-DTARGET_WORDS_BIGENDIAN=1" Condition=" $(TargetEndianess) == 'be' " />

          <CompilationFlags Include="$(AdditionalCompilationFlags)" />

          <!-- This define is a little hack: It is necessary for CLinkerTask to create separate entry in hashes cache -->
          <LinkFlags Include="-DFAKE_$(EmulatedTargetUpper)_$(TargetEndianess)_$(TargetWordSize)" />
          <LinkFlags Include="-Wl,--wrap=memcpy" Condition=" $(HostWordSize) == '64' " />
          <LinkFlags Include="-fomit-frame-pointer" />
          <LinkFlags Include="-lpthread" />
          <LinkFlags Include="-lm" />
          <LinkFlags Include="-lrt" />
          <LinkFlags Include="-shared" />
          <LinkFlags Include="-z defs" />
          <LinkFlags Include="-m32 " Condition="$(HostWordSize) == '32'" />
          <LinkFlags Include="$(AdditionalLinkFlags)" />
      </ItemGroup>
  </Target>

  <Target Name="_PrepareInputsAndOutputsForCompilation" DependsOnTargets="GenerateFlags">
      <ItemGroup>
          <InputFiles Include="**" Exclude="config/**;tcg/**;bin/**;obj/**;lib64/**;**/.*" />
          <ObjectFiles Include="@(SourceFiles->'$(ObjectFilesDirectory)/%(relativedir)%(filename).o')" />
          <ObjectFiles Include="$(TcgLibraryDirectory)/$(TcgLibraryFilename)" />
      </ItemGroup>
  </Target>

  <Target Name="CompileTcg" DependsOnTargets="GenerateFlags">
    <Message Text="Compiling tcg" />
    <MSBuild
        Projects="tcg.cproj"
        Targets="_VerifyProperties;Compile;Build"
        Properties="Configuration=$(Configuration);HostWordSize=$(HostWordSize);TargetWordSize=$(TargetWordSize);Endianess=$(TargetEndianess)" />
  </Target>

  <Target Name="Compile" DependsOnTargets="_PrepareInputsAndOutputsForCompilation;GenerateFlags;CompileTcg" Inputs="@(InputFiles)" Outputs="@(ObjectFiles)" >
    <CCompilerTask Parallel="false" Sources="@(SourceFiles)" Flags="@(CompilationFlags)" ObjectFilesDirectory="$(ObjectFilesDirectory)" />
  </Target>

  <Target Name="Link" DependsOnTargets="Compile" Inputs="@(ObjectFiles)" Outputs="$(SoFileLocation)/$(LibraryPath)">
      <MakeDir Directories="$(SoFileLocation)" />
      <CLinkerTask ObjectFiles="@(ObjectFiles)" Flags="@(LinkFlags)" Output="$(SoFileLocation)/$(LibraryPath)" />
  </Target>

  <Target Name="Build" DependsOnTargets="Link">
  </Target>

  <Target Name="Clean">
      <MSBuild Projects="tcg.cproj" Targets="Clean" />
      <Exec Command="rm -rf config" />
      <Exec Command="rm -rf obj" />
      <Exec Command="rm -rf bin" />
  </Target>
</Project>
